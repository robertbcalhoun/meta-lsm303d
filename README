lsm303d driver and bitbake layer
Layer (c) 2016 by Robert B Calhoun, Shotspotter Inc rcalhoun@gmail.com

License
=======
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.



This README file contains information on building the a driver for the
ST Micro lsm303d accelerometer / magnetometer as an out-of-tree build
under the yocto build system. It includes both the recipe for building
the kernel module and the source code for the driver itself. The source 
code is derived from the driver on ST's web site, which doesn't compile 
for modern linux.

I've tested this one on linux 4.4 and linux mainline (currently 4.6).


Dependencies
============

This layer depends on having the yocto build system installed. Install
that and then add this as a layer in conf/bblayers.conf.

Once you've done that you should be able to build the kernel module 
like this:

$bitbake st-lsm303d

and you can include st-lsm303d in your recipes in the usual manner.

Device Tree
===========

Use:

compatible = "st,lsm303d"; 

I have plans to modify this driver to support throwing interrupts from
the lsm303d using these device tree fields:

/* UNSUPPORTED */
st,sensors = "accelerometer","magnetometer";
st,sensor-names = "lsm303d-acc","lsm303d-mag";
st,drdy-gpios = <&gpio3 2 GPIO_ACTIVE_LOW>, <&gpio3 4 GPIO_ACTIVE_LOW>;
st,drdy-int-pins = <1>,<2>;

but I haven't done that work yet.


Device tree fragments if it is helpful


/* in your pinmuxes set up you i2c device and gpios that are connected to int1/2 (if any) */

	/* st lsm303 accelerometer-magnetometer */
 	lsm303d_i2c_pins_default: lsm303d_i2c_pins_default {
 		pinctrl-single,pins = <
 			0x154 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (B17) spi0_d0.I2C2_SCL */
 			0x150 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (A17) spi0_sclk.I2C2_SDA */
 			0x110 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (J15) gmii1_rxer.gpio3[2] lsm303d INT1*/
 			0x118 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (J17) gmii1_rxdv.gpio3[4] lsm303d INT2 */
 		>;
 	};
 
 	lsm303d_i2c_pins_sleep: lsm303d_i2c_pins_sleep {
 		pinctrl-single,pins = <
 			0x154 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (B17) spi0_d0.I2C2_SCL */
 			0x150 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (A17) spi0_sclk.I2C2_SDA */
 			0x110 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (J15) gmii1_rxer.gpio3[2] lsm303d INT1*/
 			0x118 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (J17) gmii1_rxdv.gpio3[4] lsm303d INT2 */
 		>;
 	};
 

/* and then define the lsm303d as a subnode of your i2c bus */


&i2c2 {
 	pinctrl-names = "default","sleep";
 	pinctrl-0 = <&lsm303d_i2c_pins_default>;
 	pinctrl-1 = <&lsm303d_i2c_pins_sleep>;
 	status = "okay";
 	clock-frequency = <400000>;
 
 
 	lsm303d: lsm303d@1e {
 		compatible = "st,lsm303d";
 		reg = <0x1e>;
 		status = "okay";
 		/* fields below are not used in the driver yet */
 		st,sensors = "accelerometer","magnetometer";
 		st,sensor-names = "lsm303d-acc","lsm303d-mag";
 		st,drdy-gpios = <&gpio3 2 GPIO_ACTIVE_LOW>, <&gpio3 4 GPIO_ACTIVE_LOW>;
 		st,drdy-int-pins = <1>,<2>;
 	};
 
 };
